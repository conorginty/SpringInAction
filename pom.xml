<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<!-- <parent> specifies that your project has spring-boot-starter-parent as its parent POM.
	Among other things, this parent POM provides dependency management for several libraries commonly used in
	Spring projects. For those libraries covered by the parent POM, you won’t have to specify a version, because
	it’s inherited from the parent. The version, 3.3.0, indicates that you’re using Spring Boot 3.3.0 and, thus,
	will inherit dependency management as defined by that version of Spring Boot. -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.3.0</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>sia</groupId>
	<artifactId>taco-cloud</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>taco-cloud</name>
	<description>Taco Cloud project for Spring Boot</description>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<!-- Spring Boot starter dependencies are special in that they typically don’t have any library code
		themselves but instead transitively pull in other libraries. These starter dependencies offer the following
		primary benefits:
		- Your build file will be significantly smaller and easier to manage.
		- You’re able to think of your dependencies in terms of what capabilities they provide, rather than their
		library names. If you’re developing a web application, you’ll add the web starter dependency rather than a
		laundry list of individual libraries that enable you to write a web application.
		- You’re freed from the burden of worrying about library versions. You can trust that the versions of the
		libraries brought in transitively will be compatible for a given version of Spring Boot. You need to worry
		only about which version of Spring Boot you’re using. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!-- DevTools provides Spring developers with some handy development tools, such as:
		- Automatic application restart when code changes
		- Automatic browser refresh when browser-destined resources (such as templates, JavaScript, stylesheets,
		etc) change
		- Automatic disabling of template caches (so that you don't need to restart the app to see template changes
		that you'd make to your html pages when you refresh the browser - HOWEVER I haven't gotten this to work yet)
		- Built in H2 Console, if the H2 database is in use (enables an H2 console that you can access from your
		web browser. You only need to point your web browser to http://localhost:8080/h2-console to gain insight into
		the data our application is working with.) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<!-- The embedded, in-memory DB we'll be using for the moment -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<!-- Enabling 3rd party authentication (e.g. via signing in through FB, Twitter etc) so that users can login
		via the fact they're already logged into one of these other sites. This type of authentication is done via
		OAuth2 or OpenID Connect (OIDC). OAuth 2 is an authorization specification also often used to secure
		REST APIs. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-oauth2-client</artifactId>
		</dependency>
		<!-- Spring Data REST is another member of the Spring Data family that automatically creates REST APIs for
		repositories created by Spring Data. By adding Spring Data REST to my build, I get an API with operations
		for each repository interface I’ve defined. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-rest</artifactId>
		</dependency>
		<!-- By simply having the Spring Data REST starter in the build, the application gets autoconfiguration that
		enables automatic creation of a REST API for any repositories that were created by Spring Data (e.g.
		Spring Data JPA, Spring Data Mongo etc) -->

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!-- The Spring Boot Maven plugin performs a few important functions:
			- It provides a Maven goal that enables you to run the application using Maven.
			- It ensures that all dependency libraries are included within the executable JAR file and available
			on the runtime classpath.
			- It produces a manifest file in the JAR file that denotes the bootstrap class (TacoCloudApplication,
			in our case) as the main class for the executable JAR. -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<!-- Because Lombok’s effect is applied at compile time, there’s no need for it to be available at
				run time. Excluding it like this keeps it out of the resulting JAR or WAR file. -->
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
